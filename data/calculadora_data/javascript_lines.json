[
    {
        "code": "function displaynum(n1) {",
        "explanation": "Define a função 'displaynum' que recebe um argumento 'n1', que representa um número ou operador para ser exibido na tela da calculadora."
    },
    {
        "code": "    Calculator.text1.value += n1;",
        "explanation": "Adiciona o valor do argumento 'n1' ao campo de entrada da calculadora (text1). Isso permite que o número ou operador seja mostrado na tela da calculadora."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'displaynum'."
    },
    {
        "code": "function calculate() {",
        "explanation": "Define a função 'calculate' que avalia a expressão matemática inserida na calculadora e exibe o resultado."
    },
    {
        "code": "    var expression = Calculator.text1.value;",
        "explanation": "Armazena o valor atual do campo de entrada da calculadora em uma variável chamada 'expression'."
    },
    {
        "code": "    try {",
        "explanation": "Inicia um bloco 'try' para tentar executar o código que pode gerar erros, como a avaliação da expressão."
    },
    {
        "code": "        var result = eval(expression);",
        "explanation": "Usa a função 'eval' para avaliar a expressão matemática e armazena o resultado na variável 'result'."
    },
    {
        "code": "        updateHistory(expression, result);",
        "explanation": "Chama a função 'updateHistory' para adicionar a expressão e seu resultado ao histórico de cálculos."
    },
    {
        "code": "        Calculator.text1.value = result;",
        "explanation": "Exibe o resultado da avaliação no campo de entrada da calculadora."
    },
    {
        "code": "        saveHistory(expression, result);",
        "explanation": "Chama a função 'saveHistory' para armazenar a expressão e seu resultado no armazenamento local (localStorage)."
    },
    {
        "code": "    } catch (e) {",
        "explanation": "Inicia um bloco 'catch' para capturar e lidar com erros que possam ocorrer durante a avaliação da expressão."
    },
    {
        "code": "        Calculator.text1.value = \"Error\";",
        "explanation": "Se ocorrer um erro na avaliação da expressão, exibe 'Error' no campo de entrada da calculadora."
    },
    {
        "code": "    }",
        "explanation": "Fecha o bloco 'catch'."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'calculate'."
    },
    {
        "code": "function deleteLastChar() {",
        "explanation": "Define a função 'deleteLastChar' que remove o último caractere do campo de entrada da calculadora."
    },
    {
        "code": "    var currentValue = Calculator.text1.value;",
        "explanation": "Armazena o valor atual do campo de entrada da calculadora em uma variável chamada 'currentValue'."
    },
    {
        "code": "    if (currentValue.length > 0) {",
        "explanation": "Verifica se há caracteres no campo de entrada antes de tentar remover o último caractere."
    },
    {
        "code": "        Calculator.text1.value = currentValue.substring(0, currentValue.length - 1);",
        "explanation": "Remove o último caractere do campo de entrada ao definir o valor para a substring que exclui o último caractere."
    },
    {
        "code": "    }",
        "explanation": "Fecha o bloco 'if'."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'deleteLastChar'."
    },
    {
        "code": "var historyDisplay = document.getElementById(\"history\");",
        "explanation": "Obtém o elemento HTML com o id 'history' e o armazena na variável 'historyDisplay', que será usado para exibir o histórico de cálculos."
    },
    {
        "code": "function updateHistory(expression, result) {",
        "explanation": "Define a função 'updateHistory' que atualiza a área de histórico com a nova expressão e seu resultado."
    },
    {
        "code": "    historyDisplay.innerText += `\\n${expression} = ${result}`;",
        "explanation": "Adiciona a nova expressão e resultado ao texto atual do histórico, formatado com uma nova linha."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'updateHistory'."
    },
    {
        "code": "function saveHistory(expression, result) {",
        "explanation": "Define a função 'saveHistory' que salva o histórico de cálculos no armazenamento local (localStorage)."
    },
    {
        "code": "    let history = JSON.parse(localStorage.getItem(\"calculatorHistory\")) || [];",
        "explanation": "Carrega o histórico atual do armazenamento local, se existir, e o analisa como um array. Se não houver histórico, inicializa um array vazio."
    },
    {
        "code": "    history.push(`${expression} = ${result}`);",
        "explanation": "Adiciona a nova expressão e resultado ao array de histórico."
    },
    {
        "code": "    localStorage.setItem(\"calculatorHistory\", JSON.stringify(history));",
        "explanation": "Salva o array de histórico atualizado no armazenamento local como uma string JSON."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'saveHistory'."
    },
    {
        "code": "function loadHistory() {",
        "explanation": "Define a função 'loadHistory' que carrega o histórico de cálculos do armazenamento local e o exibe na tela."
    },
    {
        "code": "    let history = JSON.parse(localStorage.getItem(\"calculatorHistory\")) || [];",
        "explanation": "Carrega o histórico atual do armazenamento local, se existir, e o analisa como um array. Se não houver histórico, inicializa um array vazio."
    },
    {
        "code": "    historyDisplay.innerText = history.join(\"\\n\");",
        "explanation": "Define o texto do elemento de histórico para o histórico armazenado, juntando os itens do array com uma nova linha entre eles."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'loadHistory'."
    },
    {
        "code": "function insertComma() {",
        "explanation": "Define a função 'insertComma' que adiciona uma vírgula ao campo de entrada da calculadora."
    },
    {
        "code": "    Calculator.text1.value += \",\";",
        "explanation": "Adiciona uma vírgula ao valor atual do campo de entrada da calculadora."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'insertComma'."
    },
    {
        "code": "function calculatePercentage() {",
        "explanation": "Define a função 'calculatePercentage' que calcula a porcentagem do valor atual no campo de entrada."
    },
    {
        "code": "    var expression = Calculator.text1.value;",
        "explanation": "Armazena o valor atual do campo de entrada da calculadora em uma variável chamada 'expression'."
    },
    {
        "code": "    try {",
        "explanation": "Inicia um bloco 'try' para tentar executar o código que pode gerar erros, como a avaliação da expressão."
    },
    {
        "code": "        var result = eval(expression);",
        "explanation": "Usa a função 'eval' para avaliar a expressão matemática e armazena o resultado na variável 'result'."
    },
    {
        "code": "        if (!isNaN(result)) {",
        "explanation": "Verifica se o resultado da expressão é um número válido."
    },
    {
        "code": "            result /= 100;",
        "explanation": "Divide o resultado por 100 para calcular a porcentagem."
    },
    {
        "code": "            Calculator.text1.value = result;",
        "explanation": "Exibe o resultado da porcentagem no campo de entrada da calculadora."
    },
    {
        "code": "        } else {",
        "explanation": "Inicia um bloco 'else' para lidar com o caso em que o resultado não é um número válido."
    },
    {
        "code": "            Calculator.text1.value = \"Error\";",
        "explanation": "Se o resultado não for um número válido, exibe 'Error' no campo de entrada da calculadora."
    },
    {
        "code": "        }",
        "explanation": "Fecha o bloco 'else'."
    },
    {
        "code": "    } catch (e) {",
        "explanation": "Inicia um bloco 'catch' para capturar e lidar com erros que possam ocorrer durante a avaliação da expressão."
    },
    {
        "code": "        Calculator.text1.value = \"Error\";",
        "explanation": "Se ocorrer um erro na avaliação da expressão, exibe 'Error' no campo de entrada da calculadora."
    },
    {
        "code": "    }",
        "explanation": "Fecha o bloco 'catch'."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'calculatePercentage'."
    },
    {
        "code": "function clearHistory() {",
        "explanation": "Define a função 'clearHistory' que limpa o histórico de cálculos exibido e o histórico salvo no armazenamento local."
    },
    {
        "code": "    historyDisplay.innerText = \"\";",
        "explanation": "Limpa o conteúdo do elemento de histórico na tela."
    },
    {
        "code": "    localStorage.removeItem(\"calculatorHistory\");",
        "explanation": "Remove o item 'calculatorHistory' do armazenamento local, efetivamente limpando o histórico salvo."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'clearHistory'."
    },
    {
        "code": "function clearInput() {",
        "explanation": "Define a função 'clearInput' que limpa apenas o campo de entrada da calculadora."
    },
    {
        "code": "    Calculator.text1.value = \"\";",
        "explanation": "Define o valor do campo de entrada da calculadora como uma string vazia, limpando o campo."
    },
    {
        "code": "}",
        "explanation": "Fecha a definição da função 'clearInput'."
    },
    {
        "code": "document.addEventListener('keydown', function(event) {",
        "explanation": "Adiciona um evento de teclado para a página inteira, permitindo que as teclas pressionadas sejam capturadas e processadas."
    },
    {
        "code": "    var key = event.key;",
        "explanation": "Obtém a tecla pressionada do evento de teclado e armazena na variável 'key'."
    },
    {
        "code": "    switch (key) {",
        "explanation": "Inicia um bloco 'switch' para verificar qual tecla foi pressionada e executar a ação correspondente."
    },
    {
        "code": "        case \"0\":",
        "explanation": "Verifica se a tecla pressionada é '0'."
    },
    {
        "code": "        case \"1\":",
        "explanation": "Verifica se a tecla pressionada é '1'."
    },
    {
        "code": "        case \"2\":",
        "explanation": "Verifica se a tecla pressionada é '2'."
    },
    {
        "code": "        case \"3\":",
        "explanation": "Verifica se a tecla pressionada é '3'."
    },
    {
        "code": "        case \"4\":",
        "explanation": "Verifica se a tecla pressionada é '4'."
    },
    {
        "code": "        case \"5\":",
        "explanation": "Verifica se a tecla pressionada é '5'."
    },
    {
        "code": "        case \"6\":",
        "explanation": "Verifica se a tecla pressionada é '6'."
    },
    {
        "code": "        case \"7\":",
        "explanation": "Verifica se a tecla pressionada é '7'."
    },
    {
        "code": "        case \"8\":",
        "explanation": "Verifica se a tecla pressionada é '8'."
    },
    {
        "code": "        case \"9\":",
        "explanation": "Verifica se a tecla pressionada é '9'."
    },
    {
        "code": "            displaynum(key);",
        "explanation": "Se a tecla pressionada é um número, chama a função 'displaynum' para adicionar o número ao campo de entrada."
    },
    {
        "code": "        case \"+\":",
        "explanation": "Verifica se a tecla pressionada é o operador '+' (adição)."
    },
    {
        "code": "        case \"-\":",
        "explanation": "Verifica se a tecla pressionada é o operador '-' (subtração)."
    },
    {
        "code": "        case \"*\":",
        "explanation": "Verifica se a tecla pressionada é o operador '*' (multiplicação)."
    },
    {
        "code": "        case \"/\":",
        "explanation": "Verifica se a tecla pressionada é o operador '/' (divisão)."
    },
    {
        "code": "        case \".\":",
        "explanation": "Verifica se a tecla pressionada é o ponto decimal '.'."
    },
    {
        "code": "            displaynum(key);",
        "explanation": "Se a tecla pressionada é um operador ou ponto decimal, chama a função 'displaynum' para adicioná-lo ao campo de entrada."
    },
    {
        "code": "        case \"Enter\":",
        "explanation": "Verifica se a tecla pressionada é 'Enter'."
    },
    {
        "code": "            calculate();",
        "explanation": "Se a tecla pressionada é 'Enter', chama a função 'calculate' para avaliar a expressão e mostrar o resultado."
    },
    {
        "code": "        case \"Delete\":",
        "explanation": "Verifica se a tecla pressionada é 'Delete'."
    },
    {
        "code": "        case \"Backspace\":",
        "explanation": "Verifica se a tecla pressionada é 'Backspace'."
    },
    {
        "code": "            deleteLastChar();",
        "explanation": "Se a tecla pressionada é 'Delete' ou 'Backspace', chama a função 'deleteLastChar' para remover o último caractere do campo de entrada."
    },
    {
        "code": "        case \"%\":",
        "explanation": "Verifica se a tecla pressionada é o operador '%' (percentagem)."
    },
    {
        "code": "            calculatePercentage();",
        "explanation": "Se a tecla pressionada é '%', chama a função 'calculatePercentage' para calcular a porcentagem do valor atual no campo de entrada."
    },
    {
        "code": "    }",
        "explanation": "Fecha o bloco 'switch'."
    },
    {
        "code": "});",
        "explanation": "Fecha o bloco de código para o evento de teclado."
    },
    {
        "code": "window.onload = loadHistory;",
        "explanation": "Define que a função 'loadHistory' deve ser chamada quando a página é carregada, para exibir o histórico de cálculos salvo."
    }
]
