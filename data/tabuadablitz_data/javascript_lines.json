[
    {
        "code": "const gameContainer = document.querySelector('.game-container');",
        "explanation": "Seleciona o elemento com a classe 'game-container' do DOM e o armazena na variável 'gameContainer'. Isso permite manipular o container do jogo em outras partes do código."
    },
    {
        "code": "const startBtn = document.getElementById('start-btn');",
        "explanation": "Seleciona o elemento com o id 'start-btn' do DOM e o armazena na variável 'startBtn'. Isso permite associar a lógica de início do jogo ao botão de início."
    },
    {
        "code": "const stopBtn = document.getElementById('stop-btn');",
        "explanation": "Seleciona o elemento com o id 'stop-btn' do DOM e o armazena na variável 'stopBtn'. Isso permite associar a lógica de parada do jogo ao botão de parar."
    },
    {
        "code": "const levelEl = document.getElementById('level');",
        "explanation": "Seleciona o elemento com o id 'level' do DOM e o armazena na variável 'levelEl'. Este elemento é usado para exibir o nível atual do jogo."
    },
    {
        "code": "const questionEl = document.getElementById('question');",
        "explanation": "Seleciona o elemento com o id 'question' do DOM e o armazena na variável 'questionEl'. Este elemento é usado para exibir a pergunta atual."
    },
    {
        "code": "const answersEl = document.getElementById('answers');",
        "explanation": "Seleciona o elemento com o id 'answers' do DOM e o armazena na variável 'answersEl'. Este elemento é usado para exibir as opções de resposta."
    },
    {
        "code": "const timerEl = document.getElementById('timer');",
        "explanation": "Seleciona o elemento com o id 'timer' do DOM e o armazena na variável 'timerEl'. Este elemento é usado para exibir o temporizador do jogo."
    },
    {
        "code": "const resultEl = document.getElementById('result');",
        "explanation": "Seleciona o elemento com o id 'result' do DOM e o armazena na variável 'resultEl'. Este elemento é usado para exibir o resultado do nível ou do jogo."
    },
    {
        "code": "const operationSelector = document.getElementById('operation');",
        "explanation": "Seleciona o elemento com o id 'operation' do DOM e o armazena na variável 'operationSelector'. Este elemento é usado para selecionar o tipo de operação matemática."
    },
    {
        "code": "let currentLevel = 1;",
        "explanation": "Inicializa a variável 'currentLevel' com o valor 1, indicando que o jogo começa no nível 1."
    },
    {
        "code": "let currentQuestion = 0;",
        "explanation": "Inicializa a variável 'currentQuestion' com o valor 0, que será usado para rastrear a pergunta atual dentro de um nível."
    },
    {
        "code": "let correctAnswers = 0;",
        "explanation": "Inicializa a variável 'correctAnswers' com o valor 0, que será usada para contar o número de respostas corretas no nível atual."
    },
    {
        "code": "let totalCorrectAnswers = 0;",
        "explanation": "Inicializa a variável 'totalCorrectAnswers' com o valor 0, que será usada para contar o número total de respostas corretas em todos os níveis."
    },
    {
        "code": "let totalQuestionsAsked = 0;",
        "explanation": "Inicializa a variável 'totalQuestionsAsked' com o valor 0, que será usada para contar o número total de perguntas feitas no jogo."
    },
    {
        "code": "let timer;",
        "explanation": "Declara uma variável 'timer' que será usada para armazenar o identificador do temporizador do jogo."
    },
    {
        "code": "let gameInProgress = false;",
        "explanation": "Inicializa a variável 'gameInProgress' com o valor false, indicando que o jogo não está iniciado."
    },
    {
        "code": "let usedQuestions = new Set();",
        "explanation": "Cria um novo conjunto 'usedQuestions' para armazenar as perguntas já utilizadas, garantindo que não sejam repetidas."
    },
    {
        "code": "const totalLevels = 10;",
        "explanation": "Define a constante 'totalLevels' com o valor 10, que representa o número total de níveis no jogo."
    },
    {
        "code": "const questionsPerLevel = 10;",
        "explanation": "Define a constante 'questionsPerLevel' com o valor 10, que representa o número de perguntas em cada nível."
    },
    {
        "code": "const tickSound = new Audio('sound/tictac1.mp3');",
        "explanation": "Cria um objeto de áudio 'tickSound' que carrega o som de tic-tac para ser tocado durante o jogo."
    },
    {
        "code": "const finalTickSound = new Audio('sound/tictac2.mp3');",
        "explanation": "Cria um objeto de áudio 'finalTickSound' que carrega o som final de tic-tac para ser tocado quando o tempo está acabando."
    },
    {
        "code": "const correctSound = new Audio('sound/correct.mp3');",
        "explanation": "Cria um objeto de áudio 'correctSound' que carrega o som para ser tocado quando a resposta é correta."
    },
    {
        "code": "const incorrectSound = new Audio('sound/incorrect.mp3');",
        "explanation": "Cria um objeto de áudio 'incorrectSound' que carrega o som para ser tocado quando a resposta é incorreta."
    },
    {
        "code": "startBtn.addEventListener('click', startGame);",
        "explanation": "Adiciona um ouvinte de evento ao botão 'startBtn' para chamar a função 'startGame' quando o botão é clicado, iniciando o jogo."
    },
    {
        "code": "stopBtn.addEventListener('click', endGame);",
        "explanation": "Adiciona um ouvinte de evento ao botão 'stopBtn' para chamar a função 'endGame' quando o botão é clicado, terminando o jogo."
    },
    {
        "code": "operationSelector.addEventListener('change', handleOperationChange);",
        "explanation": "Adiciona um ouvinte de evento ao seletor 'operationSelector' para chamar a função 'handleOperationChange' quando a operação matemática é alterada."
    },
    {
        "code": "function startGame() {",
        "explanation": "Define a função 'startGame' que inicia o jogo."
    },
    {
        "code": "    startBtn.classList.add('hidden');",
        "explanation": "Adiciona a classe 'hidden' ao botão de iniciar, ocultando-o quando o jogo começa."
    },
    {
        "code": "    stopBtn.classList.remove('hidden');",
        "explanation": "Remove a classe 'hidden' do botão de parar, mostrando-o quando o jogo começa."
    },
    {
        "code": "    resultEl.innerText = '';",
        "explanation": "Limpa o texto exibido no elemento 'resultEl', removendo qualquer resultado anterior."
    },
    {
        "code": "    currentLevel = 1;",
        "explanation": "Define o nível atual como 1, reiniciando o jogo para o primeiro nível."
    },
    {
        "code": "    correctAnswers = 0;",
        "explanation": "Reseta o contador de respostas corretas para 0."
    },
    {
        "code": "    totalCorrectAnswers = 0;",
        "explanation": "Reseta o contador total de respostas corretas para 0."
    },
    {
        "code": "    totalQuestionsAsked = 0;",
        "explanation": "Reseta o contador total de perguntas feitas para 0."
    },
    {
        "code": "    usedQuestions.clear();",
        "explanation": "Limpa o conjunto de perguntas usadas, garantindo que novas perguntas possam ser usadas."
    },
    {
        "code": "    gameInProgress = true;",
        "explanation": "Define o estado do jogo como iniciado."
    },
    {
        "code": "    startLevel();",
        "explanation": "Chama a função 'startLevel' para iniciar o primeiro nível do jogo."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'startGame'."
    },
    {
        "code": "function handleOperationChange() {",
        "explanation": "Define a função 'handleOperationChange' que lida com a mudança de operação selecionada."
    },
    {
        "code": "    if (gameInProgress) {",
        "explanation": "Verifica se o jogo está em andamento."
    },
    {
        "code": "        endGame();",
        "explanation": "Chama a função 'endGame' para terminar o jogo se uma operação for selecionada enquanto o jogo está em andamento."
    },
    {
        "code": "    }",
        "explanation": "Fecha a verificação do estado do jogo."
    },
    {
        "code": "    startGame();",
        "explanation": "Chama a função 'startGame' para reiniciar o jogo com a nova operação selecionada."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'handleOperationChange'."
    },
    {
        "code": "function endGame() {",
        "explanation": "Define a função 'endGame' que encerra o jogo."
    },
    {
        "code": "    gameInProgress = false;",
        "explanation": "Define o estado do jogo como não iniciado."
    },
    {
        "code": "    startBtn.classList.remove('hidden');",
        "explanation": "Remove a classe 'hidden' do botão de iniciar, mostrando-o novamente após o término do jogo."
    },
    {
        "code": "    stopBtn.classList.add('hidden');",
        "explanation": "Adiciona a classe 'hidden' ao botão de parar, ocultando-o após o término do jogo."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'endGame'."
    },
    {
        "code": "function startLevel() {",
        "explanation": "Define a função 'startLevel' que inicia um novo nível do jogo."
    },
    {
        "code": "    currentQuestion = 0;",
        "explanation": "Reseta o número da pergunta atual para 0 no início do nível."
    },
    {
        "code": "    showQuestion();",
        "explanation": "Chama a função 'showQuestion' para exibir a primeira pergunta do nível."
    },
    {
        "code": "    startTimer();",
        "explanation": "Chama a função 'startTimer' para iniciar o temporizador do nível."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'startLevel'."
    },
    {
        "code": "function showQuestion() {",
        "explanation": "Define a função 'showQuestion' que exibe a pergunta atual e suas opções de resposta."
    },
    {
        "code": "    const question = generateQuestion();",
        "explanation": "Gera uma nova pergunta usando a função 'generateQuestion' e armazena o resultado na variável 'question'."
    },
    {
        "code": "    questionEl.innerText = question.text;",
        "explanation": "Define o texto do elemento 'questionEl' com a pergunta gerada."
    },
    {
        "code": "    answersEl.innerHTML = '';",
        "explanation": "Limpa o conteúdo HTML do elemento 'answersEl' para remover opções de resposta anteriores."
    },
    {
        "code": "    question.answers.forEach((answer, index) => {",
        "explanation": "Percorre cada resposta da pergunta gerada."
    },
    {
        "code": "        const button = document.createElement('button');",
        "explanation": "Cria um novo elemento de botão para cada resposta."
    },
    {
        "code": "        button.innerText = answer;",
        "explanation": "Define o texto do botão com a resposta atual."
    },
    {
        "code": "        button.addEventListener('click', () => handleAnswer(index));",
        "explanation": "Adiciona um ouvinte de evento ao botão que chama a função 'handleAnswer' quando o botão é clicado, passando o índice da resposta."
    },
    {
        "code": "        answersEl.appendChild(button);",
        "explanation": "Adiciona o botão de resposta ao elemento 'answersEl'."
    },
    {
        "code": "    });",
        "explanation": "Fecha o loop que cria botões para cada resposta."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'showQuestion'."
    },
    {
        "code": "function generateQuestion() {",
        "explanation": "Define a função 'generateQuestion' que gera uma nova pergunta com opções de resposta."
    },
    {
        "code": "    const operation = operationSelector.value;",
        "explanation": "Obtém o valor da operação selecionada e o armazena na variável 'operation'."
    },
    {
        "code": "    const question = {};",
        "explanation": "Inicializa um objeto vazio 'question' para armazenar a pergunta gerada."
    },
    {
        "code": "    question.text = `Qual é ${generateEquation(operation)}?`;",
        "explanation": "Define o texto da pergunta com base na operação selecionada e na equação gerada pela função 'generateEquation'."
    },
    {
        "code": "    question.answers = generateAnswers();",
        "explanation": "Gera uma lista de respostas usando a função 'generateAnswers' e armazena na propriedade 'answers' do objeto 'question'."
    },
    {
        "code": "    return question;",
        "explanation": "Retorna o objeto 'question' gerado pela função."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'generateQuestion'."
    },
    {
        "code": "function generateEquation(operation) {",
        "explanation": "Define a função 'generateEquation' que gera uma equação matemática com base na operação selecionada."
    },
    {
        "code": "    const num1 = Math.floor(Math.random() * 10) + 1;",
        "explanation": "Gera um número aleatório entre 1 e 10 e o armazena na variável 'num1'."
    },
    {
        "code": "    const num2 = Math.floor(Math.random() * 10) + 1;",
        "explanation": "Gera um número aleatório entre 1 e 10 e o armazena na variável 'num2'."
    },
    {
        "code": "    switch (operation) {",
        "explanation": "Inicia uma estrutura de controle switch para gerar uma equação com base na operação selecionada."
    },
    {
        "code": "        case 'addition':",
        "explanation": "Caso a operação seja 'addition' (adição)."
    },
    {
        "code": "            return `${num1} + ${num2}`;",
        "explanation": "Retorna uma string representando a equação de adição."
    },
    {
        "code": "        case 'subtraction':",
        "explanation": "Caso a operação seja 'subtraction' (subtração)."
    },
    {
        "code": "            return `${num1} - ${num2}`;",
        "explanation": "Retorna uma string representando a equação de subtração."
    },
    {
        "code": "        case 'multiplication':",
        "explanation": "Caso a operação seja 'multiplication' (multiplicação)."
    },
    {
        "code": "            return `${num1} * ${num2}`;",
        "explanation": "Retorna uma string representando a equação de multiplicação."
    },
    {
        "code": "        case 'division':",
        "explanation": "Caso a operação seja 'division' (divisão)."
    },
    {
        "code": "            return `${num1} / ${num2}`;",
        "explanation": "Retorna uma string representando a equação de divisão."
    },
    {
        "code": "    }",
        "explanation": "Fecha a estrutura de controle switch."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'generateEquation'."
    },
    {
        "code": "function generateAnswers() {",
        "explanation": "Define a função 'generateAnswers' que gera uma lista de opções de resposta para a pergunta atual."
    },
    {
        "code": "    const correctAnswer = eval(generateEquation(operation));",
        "explanation": "Calcula a resposta correta usando a função 'eval' para avaliar a equação gerada."
    },
    {
        "code": "    const answers = [correctAnswer];",
        "explanation": "Cria um array 'answers' contendo a resposta correta como o primeiro item."
    },
    {
        "code": "    while (answers.length < 4) {",
        "explanation": "Continua adicionando respostas incorretas até que haja 4 opções no array 'answers'."
    },
    {
        "code": "        const incorrectAnswer = Math.floor(Math.random() * 20) + 1;",
        "explanation": "Gera uma resposta incorreta aleatória entre 1 e 20."
    },
    {
        "code": "        if (!answers.includes(incorrectAnswer)) {",
        "explanation": "Verifica se a resposta incorreta já está no array 'answers'."
    },
    {
        "code": "            answers.push(incorrectAnswer);",
        "explanation": "Adiciona a resposta incorreta ao array 'answers' se ainda não estiver presente."
    },
    {
        "code": "        }",
        "explanation": "Fecha a verificação se a resposta já está incluída."
    },
    {
        "code": "    }",
        "explanation": "Fecha o loop para garantir que o array 'answers' tenha 4 opções."
    },
    {
        "code": "    return shuffleArray(answers);",
        "explanation": "Retorna o array 'answers' embaralhado para criar uma ordem aleatória das respostas."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'generateAnswers'."
    },
    {
        "code": "function shuffleArray(array) {",
        "explanation": "Define a função 'shuffleArray' que embaralha um array."
    },
    {
        "code": "    for (let i = array.length - 1; i > 0; i--) {",
        "explanation": "Percorre o array de trás para frente para embaralhar seus elementos."
    },
    {
        "code": "        const j = Math.floor(Math.random() * (i + 1));",
        "explanation": "Gera um índice aleatório 'j' para trocar o elemento 'i' com o elemento 'j'."
    },
    {
        "code": "        [array[i], array[j]] = [array[j], array[i]];",
        "explanation": "Troca os elementos nos índices 'i' e 'j' do array."
    },
    {
        "code": "    }",
        "explanation": "Fecha o loop de embaralhamento do array."
    },
    {
        "code": "    return array;",
        "explanation": "Retorna o array embaralhado."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'shuffleArray'."
    },
    {
        "code": "function handleAnswer(index) {",
        "explanation": "Define a função 'handleAnswer' que lida com a seleção de uma resposta pelo usuário."
    },
    {
        "code": "    if (index === correctAnswerIndex) {",
        "explanation": "Verifica se a resposta selecionada é a correta."
    },
    {
        "code": "        score++;",
        "explanation": "Incrementa a pontuação do jogador se a resposta estiver correta."
    },
    {
        "code": "        showQuestion();",
        "explanation": "Exibe a próxima pergunta."
    },
    {
        "code": "    } else {",
        "explanation": "Caso a resposta selecionada não seja a correta."
    },
    {
        "code": "        endGame();",
        "explanation": "Encerra o jogo se a resposta estiver errada."
    },
    {
        "code": "    }",
        "explanation": "Fecha a verificação se a resposta está correta."
    },
    {
        "code": "}",
        "explanation": "Fecha a função 'handleAnswer'."
    },
    {
        "code": "const startBtn = document.getElementById('start');",
        "explanation": "Obtém o elemento de botão de iniciar pelo seu ID e o armazena na variável 'startBtn'."
    },
    {
        "code": "const stopBtn = document.getElementById('stop');",
        "explanation": "Obtém o elemento de botão de parar pelo seu ID e o armazena na variável 'stopBtn'."
    },
    {
        "code": "const operationSelector = document.getElementById('operation');",
        "explanation": "Obtém o elemento de seleção de operação pelo seu ID e o armazena na variável 'operationSelector'."
    },
    {
        "code": "const questionEl = document.getElementById('question');",
        "explanation": "Obtém o elemento de exibição da pergunta pelo seu ID e o armazena na variável 'questionEl'."
    },
    {
        "code": "const answersEl = document.getElementById('answers');",
        "explanation": "Obtém o elemento de exibição das respostas pelo seu ID e o armazena na variável 'answersEl'."
    }
]
